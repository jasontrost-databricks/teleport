/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter long_type_number,eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/vnet/v1/vnet_service.proto" (package "teleport.lib.teleterm.vnet.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import { StopResponse } from "./vnet_service_pb";
import { StopRequest } from "./vnet_service_pb";
import { StartResponse } from "./vnet_service_pb";
import { StartRequest } from "./vnet_service_pb";
import type * as grpc from "@grpc/grpc-js";
/**
 * VnetService provides methods to manage a VNet instance.
 *
 * @generated from protobuf service teleport.lib.teleterm.vnet.v1.VnetService
 */
export interface IVnetService extends grpc.UntypedServiceImplementation {
    /**
     * Start starts VNet.
     *
     * @generated from protobuf rpc: Start(teleport.lib.teleterm.vnet.v1.StartRequest) returns (teleport.lib.teleterm.vnet.v1.StartResponse);
     */
    start: grpc.handleUnaryCall<StartRequest, StartResponse>;
    /**
     * Stop stops VNet.
     *
     * @generated from protobuf rpc: Stop(teleport.lib.teleterm.vnet.v1.StopRequest) returns (teleport.lib.teleterm.vnet.v1.StopResponse);
     */
    stop: grpc.handleUnaryCall<StopRequest, StopResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service teleport.lib.teleterm.vnet.v1.VnetService.
 *
 * Usage: Implement the interface IVnetService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IVnetService = ...
 * server.addService(vnetServiceDefinition, service);
 * ```
 */
export const vnetServiceDefinition: grpc.ServiceDefinition<IVnetService> = {
    start: {
        path: "/teleport.lib.teleterm.vnet.v1.VnetService/Start",
        originalName: "Start",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => StartResponse.fromBinary(bytes),
        requestDeserialize: bytes => StartRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(StartResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(StartRequest.toBinary(value))
    },
    stop: {
        path: "/teleport.lib.teleterm.vnet.v1.VnetService/Stop",
        originalName: "Stop",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => StopResponse.fromBinary(bytes),
        requestDeserialize: bytes => StopRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(StopResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(StopRequest.toBinary(value))
    }
};
